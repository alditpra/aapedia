---
import { Image } from 'astro:assets';
import { siteConfig } from '@config/site';
---

<div class="mb-8 flex justify-center">
  <div class="relative w-full max-w-md">
    <input 
      type="text" 
      id="search-input" 
      placeholder="Ketik untuk mencari..."
      class="w-full pl-4 pr-12 py-3 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
      autocomplete="off"
      spellcheck="false"
    />

    <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </div>
  </div>
</div>

<div id="search-info" class="text-center mb-6 text-gray-600 dark:text-gray-400 text-lg"></div>

<div id="search-results" class="grid grid-cols-1 md:grid-cols-2 gap-6"></div>

<div id="no-results" class="hidden text-center py-8">
  <p class="text-lg text-gray-600 dark:text-gray-400">Tidak menemukan apapun</p>
</div>

<script is:inline>
  const SPINNER = `<div class="flex justify-center py-10">
    <svg class="animate-spin h-10 w-10 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  </div>`;

  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    const noResults = document.getElementById('no-results');
    const searchInfo = document.getElementById('search-info');

    let searchData = null;
    let fuse = null;
    let initialized = false;
    let spinnerTimeout = null;

    async function loadFuseScript() {
      return new Promise((resolve, reject) => {
        if (window.Fuse) return resolve();
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/fuse.js@6.6.2';
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
      });
    }

    async function initSearch() {
      if (initialized) return;
      initialized = true;

      // Gunakan cache global jika tersedia
      if (window.fuseInstance && window.searchIndex) {
        fuse = window.fuseInstance;
        searchData = window.searchIndex;
        return;
      }

      spinnerTimeout = setTimeout(() => {
        searchResults.innerHTML = SPINNER;
      }, 150);

      try {
        await loadFuseScript();
        const res = await fetch('/search.json');
        if (!res.ok) throw new Error('Gagal fetch search data');
        searchData = await res.json();

        fuse = new Fuse(searchData, {
          keys: ['title', 'description', 'tags', 'categories', 'content'],
          includeMatches: true,
          minMatchCharLength: 2,
          threshold: 0.5,
        });

        // Cache ke window
        window.fuseInstance = fuse;
        window.searchIndex = searchData;

        const params = new URLSearchParams(window.location.search);
        const query = params.get('q');
        if (query) {
          searchInput.value = query;
          performSearch(query);
        } else {
          searchResults.innerHTML = '';
        }
      } catch (err) {
        console.error(err);
        searchResults.innerHTML = `<div class="text-center py-8 text-red-500">Gagal memuat data pencarian.</div>`;
      } finally {
        clearTimeout(spinnerTimeout);
      }
    }

    function performSearch(query) {
      if (!fuse || !query.trim()) {
        searchResults.innerHTML = '';
        searchResults.classList.add('hidden');
        noResults.classList.add('hidden');
        searchInfo.textContent = '';
        return;
      }

      const params = new URLSearchParams(window.location.search);
      params.set('q', query);
      history.replaceState(null, '', `${window.location.pathname}?${params}`);

      const results = fuse.search(query);
      displayResults(results);
    }

    function displayResults(results) {
      searchResults.innerHTML = '';
      if (results.length === 0) {
        searchResults.classList.add('hidden');
        noResults.classList.remove('hidden');
        searchInfo.textContent = `Tidak menemukan '${searchInput.value}'`;
        return;
      }

      searchResults.classList.remove('hidden');
      noResults.classList.add('hidden');
      searchInfo.textContent = `Ada ${results.length} ${results.length > 1 ? : ''} hasil dari '${searchInput.value}'`;

      results.forEach(result => {
        const post = result.item;
        const article = document.createElement('article');
        article.className = 'bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow duration-300';

        let imageHtml = '';
        if (post.image?.src) {
          const imgSrc = post.image.src.startsWith('/') ? post.image.src : `/${post.image.src}`;
          imageHtml = `
            <div class="aspect-video overflow-hidden">
              <img 
                src="${imgSrc}" 
                alt="${post.title}" 
                class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                width="${post.image.width || 400}"
                height="${post.image.height || 225}"
                loading="lazy"
              />
            </div>`;
        }

        let categoriesHtml = '';
        if (post.categories?.length) {
          categoriesHtml = `
            <div class="flex items-center mr-4">
              <svg class="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
              </svg>
              <span>${post.categories.join(', ')}</span>
            </div>`;
        }

        let tagsHtml = '';
        if (post.tags?.length) {
          tagsHtml = `
            <div class="flex flex-wrap gap-2 mt-3">
              ${post.tags.slice(0, 3).map(tag => `
                <a href="/tags/${tag.toLowerCase()}/" class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full text-xs hover:bg-blue-100 dark:hover:bg-blue-900 transition-colors duration-300">
                  #${tag}
                </a>`).join('')}
            </div>`;
        }

        article.innerHTML = `
          <a href="/${post.slug}/" class="block">
            ${imageHtml}
            <div class="p-4">
              <div class="flex flex-wrap items-center text-xs text-gray-500 dark:text-gray-400 mb-3">
                <div class="flex items-center mr-4">
                  <svg class="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <span>${post.date}</span>
                </div>
                ${categoriesHtml}
              </div>

              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-300">
                ${post.title}
              </h3>

              ${post.description ? `<p class="text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">${post.description}</p>` : ''}

              ${tagsHtml}
            </div>
          </a>`;
        searchResults.appendChild(article);
      });
    }

    let debounceTimer;
    searchInput.addEventListener('input', async (e) => {
      clearTimeout(debounceTimer);
      const query = e.target.value.trim();

      debounceTimer = setTimeout(async () => {
        if (!initialized) await initSearch();
        if (fuse) performSearch(query);
      }, 300);
    });
  });
</script>

